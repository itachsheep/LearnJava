package com.tao.jichu;

public class _7_高级排序_希尔排序 {
    /**
     * 希尔排序也成为“缩小增量排序”，其基本原理是，
     * 现将待排序的数组元素分成多个子序列，
     * 使得每个子序列的元素个数相对较少，
     * 然后对各个子序列分别进行直接插入排序，
     * 待整个待排序列“基本有序”后，
     * 最后在对所有元素进行一次直接插入排序。
     * 因此，我们要采用跳跃分割的策略：将相距某个“增量”的记录组成一个子序列，
     * 这样才能保证在子序列内分别进行直接插入排序后得到的结果是基本有序而不是局部有序。希尔排序是对直接插入排序算法的优化和升级

     由于记录是跳跃式的移动，希尔排序并不是一种稳定的排序算法。
     希尔排序最好时间复杂度和平均时间复杂度都是o（nlogn） 最坏 o(n*n)
     */
    public void shellSort(int[] arr){
        int n = arr.length;
        int h = n/2;
        while (h > 0){
            /**
             * 当h=1变成
             * for(int i = 1;i<n;i++)
             *    for(int j=i;j>0;j--){
             *      如果比前一个元素大，则往前移动，继续比较，直到到第一个元素
             *      该思路就是插入排序，假设前面已经排好序，然后将最小的排在前面
             *    }
             */
            for (int i = h; i <n;i++){
                int temp = arr[i];
                int j = i;
                while (j > h-1 && arr[j-h] > temp){
                    arr[j] = arr[j-h];
                    j = j -h;
                }
                arr[j] = temp;
            }
            h = h/2;
        }
    }
}
